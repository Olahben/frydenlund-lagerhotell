@inject IDialogService DialogService
@inject WarehouseHotelService _warehouseHotelService
@inject LocationService _locationService
@inject NavigationManager _navigationManager

<style>
    .lagerhotell-link-change {
        margin-right: -30px;
    }



    .lagerhotell-link-text {
        display: inline-block;
        width: 90px;
    }

    .lagerhotell-link {
        display: flex;
        align-items: stretch;
    }
</style>

<MudDrawerHeader>
    <MudText Typo="Typo.h6">Lokasjoner</MudText>
</MudDrawerHeader>

<MudNavMenu>
    @if (isInitialized)
    {
        @foreach (var location in locations)
        {
            <MudNavGroup Title="@location.Name">
                @foreach (var warehouseHotel in warehouseHotels)
                {
                    if (warehouseHotel.LocationName == location.Name)
                    {
                        string url = "/Lagerhotell/" + warehouseHotel.Name;
                        <MudNavLink Icon="@Icons.Material.Filled.LocationCity" Class="lagerhotell-link" OnClick="() => RedirectToWarehouseHotel(url)"><div class="lagerhotell-link-text">@warehouseHotel.Name </div></MudNavLink>
                    }
                    else
                    {
                        // Console.WriteLine($"No warehouse hotels found for this location, {warehouseHotel.LocationName} does not match {location.Name}");
                    }
                }
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <MudNavLink @onclick="OpenAddWarehouseHotelDialog" Icon="@Icons.Material.Filled.Add">Legg til ett lagerhotell</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Delete" OnClick="OpenDeleteWarehouseHotelDialog">Slett ett lagerhotell</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.ChangeCircle" OnClick="OpenChangeWarehouseHotelDialog">Endre på ett lagerhotell</MudNavLink>
                    </Authorized>
                </AuthorizeView>
            </MudNavGroup>
        }
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <MudNavLink @onclick="OpenAddLocationDialog" Icon="@Icons.Material.Filled.Add">Legg til en lokasjon</MudNavLink>
                <MudNavLink @onclick="OpenDeleteLocationDialog" Icon="@Icons.Material.Filled.Delete">Slett en lokasjon og tilhørende info</MudNavLink>
                <MudNavLink @onclick="OpenChangeLocationDialog" Icon="@Icons.Material.Filled.ChangeCircle">Endre en lokasjon</MudNavLink>
            </Authorized>
        </AuthorizeView>
    }
</MudNavMenu>

<style>
    .custom-class {
        backdrop-filter: blur(10px);
    }

    .width {
        max-width: 400px;
    }
</style>
@code {
    private List<Location> locations;
    private List<WarehouseHotel> warehouseHotels;
    private bool isInitialized = false;


    /// <summary>
    /// Laster inn alle lokasjoner og lagerhotellene til lokasjonene
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await GetAllLocations();
        await GetAllWarehouseHotels();
        isInitialized = true;
    }


    private async Task GetAllLocations()
    {
        try
        {
            locations = await _locationService.GetAllLocations();
        }
        catch (UnauthorizedAccessException e)
        {
            Snackbar.Add("Økten din har utløpt, vær så snill og logg inn på nytt", MudBlazor.Severity.Error);
            Console.WriteLine(e);
        }
        catch (Exception e)
        {
            Snackbar.Add("Noe gikk galt, vennligst prøv igjen", MudBlazor.Severity.Error);
            Console.WriteLine(e);
        }
    }

    private async Task RedirectToWarehouseHotel(string url)
    {
        @*Fix this, loads slowly*@
        _navigationManager.NavigateTo(url, true);
    }

    private async Task GetAllWarehouseHotels()
    {
        warehouseHotels = await _warehouseHotelService.GetAllWarehouseHotels();
    }

    private void OpenAddLocationDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.Locations.Add>("Legg til en lokasjon", options);
    }

    private void OpenDeleteLocationDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.Locations.Delete>("Slett en lokasjon", options);
    }

    private void OpenChangeLocationDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.Locations.Change>("Endre en lokasjon", options);
    }

    private void OpenAddWarehouseHotelDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.WarehouseHotels.AddWarehouseHotel>("Legg til ett lagerhotell", options);
    }

    private void OpenDeleteWarehouseHotelDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.WarehouseHotels.DeleteWarehouseHotel>("Slett ett lagerhotell", options);
    }

    private void OpenChangeWarehouseHotelDialog()
    {
        var options = new DialogOptions { BackgroundClass = "custom-class" };
        DialogService.Show<Pages.WarehouseHotels.ChangeWarehouseHotel>("Endre ett lagerhotell", options);
    }
}
