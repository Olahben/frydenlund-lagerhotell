@using System.Drawing
@using MudBlazor.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudGrid Style="width: 100%; margin: 0;">
    <MudItem Style="padding-right:0; padding-left: 0; padding-bottom: 0;" xs="12" sm="12" md="5" lg="5" xl="5" xxl="5">
        <MudPaper Square="true" Style="background-color: rgba(89, 74, 226, 1); padding: 5%;">
            <MudText Style="color: white; font-weight: 580;" Typo="Typo.body1">Ett lagerhotell med stort utvalg</MudText>
            <MudText Style="color: white" Typo="Typo.h3">Lagring ved @RelevantWarehouseHotel.Name</MudText>
                @foreach (var para in DetailedDescriptionParas)
            {
                <MudText Style="color: white; margin-top: 5%; margin-bottom: 5%; font-size: 16px" Typo="Typo.body1">@para</MudText>
            }
            <MudText Typo="Typo.h5" Style="color: white;">Åpningstider</MudText>
            <MudText Typo="Typo.body1" Style="color: white;">@OpeningTime - @ClosingTime</MudText>
                <MudText Typo="Typo.body2" Style="color: white;">*Er ikke åpent på helligdager</MudText>
                <MudText Typo="Typo.body1" Style="color: white;">Kundeservice: </MudText>
                <MudText Typo="Typo.h6" Style="color: white;">Kontaktinformasjon</MudText>
                <MudText Typo="Typo.body1" Style="color: white;">Telefon: @RelevantWarehouseHotel.PhoneNumber</MudText>
            </MudPaper>
        </MudItem>
        @if (_currentBreakpoint.ToString() == "Xs")
    {
        <MudItem Style="padding-left: 0px;padding-right: 24px; padding-top: 0; padding-bottom: 0; margin-bottom:206px;" xs="12" sm="12" md="7" lg="7" xl="7" xxl="7">
            <MudGrid Style="height: 100%; margin: 0;">
                <MudItem Style="height: 100%; padding: 0;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudCarousel Class="mud-width-full mud-height-full" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                        @foreach (string image in ImageCarouselImages)
                        {
                            <MudCarouselItem>
                                <img style="height: 100%; width: 100%;" src="data:Image/jpg+png;base64, @image" />
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </MudItem>
                <MudItem Style="height: 100%; padding: 0; padding-right: 24px;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudGrid Style="padding-right: 24px; padding: 0; margin: 0;" Class="mud-height-full" Justify="Justify.FlexEnd">
                        <MudPaper Square="true" Class="mud-width-full mud-height-full" Style="background-color: rgba(89, 74, 226, 1); padding: 5px;">
                            <MudList T="string">
                            @foreach (string bulletPoint in BulletPoints)
                            {
                                    <MudListItem Style="color: white; margin-top: 0; align-items: center;"><p style=" display: flex;text-align: center; align-items: center;"><MudIcon Style="color: white;" Icon="@Icons.Material.Filled.ArrowRight"></MudIcon> @bulletPoint</p></MudListItem>
                            }
                            </MudList>
                        </MudPaper>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    } else if (_currentBreakpoint.ToString() == "Sm")
    {
        <MudItem Style="padding-left: 0px;padding-right: 24px; padding-top: 0; padding-bottom: 0; margin-bottom:306px;" xs="12" sm="12" md="7" lg="7" xl="7" xxl="7">
            <MudGrid Style="height: 100%; margin: 0;">
                <MudItem Style="height: 300px; padding: 0;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudCarousel Class="mud-width-full mud-height-full" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                        @foreach (string image in ImageCarouselImages)
                        {
                            <MudCarouselItem>
                                <img style="height: 100%; width: 100%;" src="data:Image/jpg+png;base64, @image" />
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </MudItem>
                <MudItem Style="height: 80%; padding: 0; padding-right: 24px;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudGrid Style="padding-right: 24px; padding: 0; margin: 0;" Class="mud-height-full" Justify="Justify.FlexEnd">
                        <MudPaper Square="true" Class="mud-width-full mud-height-full" Style="background-color: rgba(89, 74, 226, 1); padding: 5px;">
                            <MudList T="string">
                                @foreach (string bulletPoint in BulletPoints)
                                {
                                    <MudListItem Style="color: white; margin-top: 0; align-items: center;"><p style=" display: flex;text-align: center; align-items: center;"><MudIcon Style="color: white;" Icon="@Icons.Material.Filled.ArrowRight"></MudIcon> @bulletPoint</p></MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
    else
    {
        <MudItem Style="padding-left: 12px; padding-bottom: 0;" xs="12" sm="12" md="7" lg="7" xl="7" xxl="7">
            <MudGrid Style="height: 100%; margin: 0; max-width: 100%;">
                <MudItem Style="height: 25%; padding-left: 0; padding-top: 0; padding-bottom: 0;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudCarousel Class="mud-height-full" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                        @foreach (string image in ImageCarouselImages)
                        {
                            <MudCarouselItem>
                                <img style="height: 280px; width: 100%; max-width: 100% !important;" src="data:Image/jpg+png;base64, @image" />
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </MudItem>
                <MudItem Style="height: 75%; padding-left: 0; padding-bottom: 0;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                    <MudGrid Style="padding-right: 24px; padding-left: 0; padding-top: 0; padding-bottom: 0; margin: 0;" Class="mud-height-full" Justify="Justify.FlexEnd">
                        <MudPaper Class="mud-width-full mud-height-full" Style="background-color: rgba(89, 74, 226, 1); padding: 5px;">
                            <MudList T="string">
                                @foreach (string bulletPoint in BulletPoints)
                                {
                                    <MudListItem Style="color: white; margin-top: 0; align-items: center;"><p style=" display: flex;text-align: center; align-items: center;"><MudIcon Style="color: white;" Icon="@Icons.Material.Filled.ArrowRight"></MudIcon> @bulletPoint</p></MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
</MudGrid>


@*<MudItem Style="" xs="12" sm="12" md="6" lg="6" xl="6" xxl="6">
        <MudGrid Style="height: 100%">
        <MudItem Style="padding-left: 0; padding-right: 0;" xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
        <MudCarousel Class="mud-width-full mud-height-full" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
        @foreach (string image in ImageCarouselImages)
        {
        <MudCarouselItem>
        <img src="data:Image/jpg+png;base64, @image" />
        </MudCarouselItem>
        }
        </MudCarousel>

        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
        <MudGrid Class="mud-height-full" Justify="Justify.FlexEnd">
        <MudPaper Class="mud-width-full mud-height-full" Style="background-color: rgba(89, 74, 226, 1); padding: 5px;">
        @foreach(string bulletPoint in BulletPoints) {
        <MudNavLink Icon="@Icons.Material.Filled.ArrowRight" Style="color: white; margin-top: 0;" IconColor="MudBlazor.Color.Inherit">@bulletPoint</MudNavLink>
        }
        </MudPaper>
        </MudGrid>
        </MudItem>
        </MudGrid>
        </MudItem>*@

@code {
    private bool IsInitialized { get; set; } = false;
    private Transition transition = Transition.Slide;
    [Parameter]
    public WarehouseHotel RelevantWarehouseHotel { get; set; }
    [Parameter]
    public List<string> DetailedDescriptionParas { get; set; } = new List<string>();
    [Parameter]
    public List<string> BulletPoints { get; set; } = new List<string>();
    [Parameter]
    public string OpeningTime { get; set; }
    [Parameter]
    public string ClosingTime { get; set; }
    [Parameter]
    public List<string> ImageCarouselImages { get; set; } = new List<string>();

    [Inject]
    private IBrowserViewportService browserViewportService { get; set; }
    private Breakpoint _start;
    private Breakpoint _currentBreakpoint;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await browserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await browserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            _start = browserViewportEventArgs.Breakpoint;
            _currentBreakpoint = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            _currentBreakpoint = browserViewportEventArgs.Breakpoint;
            Console.WriteLine(_currentBreakpoint.ToString());
        }

        return InvokeAsync(StateHasChanged);
    }
        }
